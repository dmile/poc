{"version":3,"file":"main.9d0748e7606300fb6bdf.bundle.js","sources":["webpack:///./src/components/customtabs/index.js"],"sourcesContent":["/* eslint-disable no-restricted-globals */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport warning from 'warning';\nimport classNames from 'classnames';\nimport EventListener from 'react-event-listener';\nimport debounce from 'debounce'; // < 1kb payload overhead when lodash/debounce is > 3kb.\nimport {detectScrollType, getNormalizedScrollLeft} from 'normalize-scroll-left';\nimport {componentPropType} from '@material-ui/utils';\nimport animate from '@material-ui/core/internal/animate';\nimport ScrollbarSize from '@material-ui/core/Tabs/ScrollbarSize';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport TabScrollButton from '@material-ui/core/Tabs/TabScrollButton';\n\nexport const styles = theme => ({\n    /* Styles applied to the root element. */\n    root: {\n        overflow: 'hidden',\n        minHeight: 48,\n        WebkitOverflowScrolling: 'touch', // Add iOS momentum scrolling.\n    },\n    /* Styles applied to the flex container element. */\n    flexContainer: {\n        display: 'flex',\n    },\n    /* Styles applied to the flex container element if `centered={true}` & `scrollable={false}`. */\n    centered: {\n        justifyContent: 'center',\n    },\n    /* Styles applied to the tablist element. */\n    scroller: {\n        position: 'relative',\n        display: 'inline-block',\n        flex: '1 1 auto',\n        whiteSpace: 'nowrap',\n    },\n    /* Styles applied to the tablist element if `scrollable={false}`. */\n    fixed: {\n        overflowX: 'hidden',\n        width: '100%',\n    },\n    /* Styles applied to the tablist element if `scrollable={true}`. */\n    scrollable: {\n        overflowX: 'scroll',\n    },\n    /* Styles applied to the `ScrollButtonComponent` component. */\n    scrollButtons: {},\n    /* Styles applied to the `ScrollButtonComponent` component if `scrollButtons=\"auto\"`. */\n    scrollButtonsAuto: {\n        [theme.breakpoints.down('xs')]: {\n            display: 'none',\n        },\n    }\n});\n\nclass Tabs extends React.Component {\n    constructor() {\n        super();\n        if (typeof window !== 'undefined') {\n            this.handleResize = debounce(() => {\n                this.updateScrollButtonState();\n            }, 166); // Corresponds to 10 frames at 60 Hz.\n\n            this.handleTabsScroll = debounce(() => {\n                this.updateScrollButtonState();\n            }, 166); // Corresponds to 10 frames at 60 Hz.\n        }\n    }\n\n    state = {\n        scrollerStyle: {\n            marginBottom: 0,\n        },\n        showLeftScroll: false,\n        showRightScroll: false,\n        mounted: false,\n    };\n\n    componentDidMount() {\n        this.setState({mounted: true});\n        this.updateScrollButtonState();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        this.updateScrollButtonState();\n    }\n\n    componentWillUnmount() {\n        this.handleResize.clear();\n        this.handleTabsScroll.clear();\n    }\n\n    getConditionalElements = () => {\n        const {classes, scrollable, ScrollButtonComponent, scrollButtons, theme} = this.props;\n        const conditionalElements = {};\n        conditionalElements.scrollbarSizeListener = scrollable ? (\n            <ScrollbarSize onChange={this.handleScrollbarSizeChange}/>\n        ) : null;\n\n        const showScrollButtons = scrollable && (scrollButtons === 'auto' || scrollButtons === 'on');\n\n        conditionalElements.scrollButtonLeft = showScrollButtons ? (\n            <ScrollButtonComponent\n                direction={theme && theme.direction === 'rtl' ? 'right' : 'left'}\n                onClick={this.handleLeftScrollClick}\n                visible={this.state.showLeftScroll}\n                className={classNames(classes.scrollButtons, {\n                    [classes.scrollButtonsAuto]: scrollButtons === 'auto',\n                })}\n            />\n        ) : null;\n\n        conditionalElements.scrollButtonRight = showScrollButtons ? (\n            <ScrollButtonComponent\n                direction={theme && theme.direction === 'rtl' ? 'left' : 'right'}\n                onClick={this.handleRightScrollClick}\n                visible={this.state.showRightScroll}\n                className={classNames(classes.scrollButtons, {\n                    [classes.scrollButtonsAuto]: scrollButtons === 'auto',\n                })}\n            />\n        ) : null;\n\n        return conditionalElements;\n    };\n\n    getTabsMeta = (value, direction) => {\n        let tabsMeta;\n        if (this.tabsRef) {\n            const rect = this.tabsRef.getBoundingClientRect();\n            // create a new object with ClientRect class props + scrollLeft\n            tabsMeta = {\n                clientWidth: this.tabsRef.clientWidth,\n                scrollLeft: this.tabsRef.scrollLeft,\n                scrollLeftNormalized: getNormalizedScrollLeft(this.tabsRef, direction),\n                scrollWidth: this.tabsRef.scrollWidth,\n                left: rect.left,\n                right: rect.right,\n            };\n        }\n\n        let tabMeta;\n        if (this.tabsRef && value !== false) {\n            const children = this.tabsRef.children[0].children;\n\n            if (children.length > 0) {\n                const tab = children[this.valueToIndex.get(value)];\n                warning(\n                    tab,\n                    [\n                        `Material-UI: the value provided \\`${value}\\` to the Tabs component is invalid.`,\n                        'None of the Tabs children have this value.',\n                        this.valueToIndex.keys\n                            ? `You can provide one of the following values: ${Array.from(\n                            this.valueToIndex.keys(),\n                            ).join(', ')}.`\n                            : null,\n                    ].join('\\n'),\n                );\n                tabMeta = tab ? tab.getBoundingClientRect() : null;\n            }\n        }\n        return {tabsMeta, tabMeta};\n    };\n\n    handleLeftScrollClick = () => {\n        this.moveTabsScroll(-this.tabsRef.clientWidth);\n    };\n\n    handleRightScrollClick = () => {\n        this.moveTabsScroll(this.tabsRef.clientWidth);\n    };\n\n    handleScrollbarSizeChange = scrollbarHeight => {\n        this.setState({\n            scrollerStyle: {\n                marginBottom: -scrollbarHeight,\n            },\n        });\n    };\n\n    moveTabsScroll = delta => {\n        const {theme} = this.props;\n\n        const multiplier = theme.direction === 'rtl' ? -1 : 1;\n        const nextScrollLeft = this.tabsRef.scrollLeft + delta * multiplier;\n        // Fix for Edge\n        const invert = theme.direction === 'rtl' && detectScrollType() === 'reverse' ? -1 : 1;\n        this.scroll(invert * nextScrollLeft);\n    };\n\n    scrollSelectedIntoView = () => {\n        const {theme, value} = this.props;\n        const {tabsMeta, tabMeta} = this.getTabsMeta(value, theme.direction);\n\n        if (!tabMeta || !tabsMeta) {\n            return;\n        }\n\n        if (tabMeta.left < tabsMeta.left) {\n            // left side of button is out of view\n            const nextScrollLeft = tabsMeta.scrollLeft + (tabMeta.left - tabsMeta.left);\n            this.scroll(nextScrollLeft);\n        } else if (tabMeta.right > tabsMeta.right) {\n            // right side of button is out of view\n            const nextScrollLeft = tabsMeta.scrollLeft + (tabMeta.right - tabsMeta.right);\n            this.scroll(nextScrollLeft);\n        }\n    };\n\n    scroll = value => {\n        animate('scrollLeft', this.tabsRef, value);\n    };\n\n    updateScrollButtonState = () => {\n        const {scrollable, scrollButtons, theme} = this.props;\n\n        if (scrollable && scrollButtons !== 'off') {\n            const {scrollWidth, clientWidth} = this.tabsRef;\n            const scrollLeft = getNormalizedScrollLeft(this.tabsRef, theme.direction);\n\n            const showLeftScroll =\n                theme.direction === 'rtl' ? scrollWidth > clientWidth + scrollLeft : scrollLeft > 0;\n\n            const showRightScroll =\n                theme.direction === 'rtl' ? scrollLeft > 0 : scrollWidth > clientWidth + scrollLeft;\n\n            if (\n                showLeftScroll !== this.state.showLeftScroll ||\n                showRightScroll !== this.state.showRightScroll\n            ) {\n                this.setState({showLeftScroll, showRightScroll});\n            }\n        }\n    };\n\n    render() {\n        const {\n            centered,\n            children,\n            classes,\n            className: classNameProp,\n            component: Component,\n            fullWidth,\n            onChange,\n            scrollable,\n            ScrollButtonComponent,\n            scrollButtons,\n            textColor,\n            theme,\n            value,\n            ...other\n        } = this.props;\n\n        warning(\n            !centered || !scrollable,\n            'Material-UI: you can not use the `centered={true}` and `scrollable={true}` properties ' +\n            'at the same time on a `Tabs` component.',\n        );\n\n        const className = classNames(classes.root, classNameProp);\n        const flexContainerClassName = classNames(classes.flexContainer, {\n            [classes.centered]: centered && !scrollable,\n        });\n        const scrollerClassName = classNames(classes.scroller, {\n            [classes.fixed]: !scrollable,\n            [classes.scrollable]: scrollable,\n        });\n\n        const conditionalElements = this.getConditionalElements();\n\n        return (\n            <Component className={className} {...other}>\n                <EventListener target=\"window\" onResize={this.handleResize}/>\n                {conditionalElements.scrollbarSizeListener}\n                <div className={classes.flexContainer}>\n                    {conditionalElements.scrollButtonLeft}\n                    <div\n                        className={scrollerClassName}\n                        style={this.state.scrollerStyle}\n                        ref={ref => {\n                            this.tabsRef = ref;\n                        }}\n                        role=\"tablist\"\n                        onScroll={this.handleTabsScroll}\n                    >\n                        <div className={flexContainerClassName}>{children}</div>\n                    </div>\n                    {conditionalElements.scrollButtonRight}\n                </div>\n            </Component>\n        );\n    }\n}\n\nTabs.propTypes = {\n    /**\n     * If `true`, the tabs will be centered.\n     * This property is intended for large views.\n     */\n    centered: PropTypes.bool,\n    /**\n     * The content of the component.\n     */\n    children: PropTypes.node,\n    /**\n     * Override or extend the styles applied to the component.\n     * See [CSS API](#css-api) below for more details.\n     */\n    classes: PropTypes.object.isRequired,\n    /**\n     * @ignore\n     */\n    className: PropTypes.string,\n    /**\n     * The component used for the root node.\n     * Either a string to use a DOM element or a component.\n     */\n    component: componentPropType,\n    /**\n     * If `true`, the tabs will grow to use all the available space.\n     * This property is intended for small views, like on mobile.\n     */\n    fullWidth: PropTypes.bool,\n    /**\n     * Callback fired when the value changes.\n     *\n     * @param {object} event The event source of the callback\n     * @param {number} value We default to the index of the child\n     */\n    onChange: PropTypes.func,\n    /**\n     * True invokes scrolling properties and allow for horizontally scrolling\n     * (or swiping) the tab bar.\n     */\n    scrollable: PropTypes.bool,\n    /**\n     * The component used to render the scroll buttons.\n     */\n    ScrollButtonComponent: componentPropType,\n    /**\n     * Determine behavior of scroll buttons when tabs are set to scroll\n     * `auto` will only present them on medium and larger viewports\n     * `on` will always present them\n     * `off` will never present them\n     */\n    scrollButtons: PropTypes.oneOf(['auto', 'on', 'off']),\n    /**\n     * Determines the color of the `Tab`.\n     */\n    textColor: PropTypes.oneOf(['secondary', 'primary', 'inherit']),\n    /**\n     * @ignore\n     */\n    theme: PropTypes.object.isRequired,\n    /**\n     * The value of the currently selected `Tab`.\n     * If you don't want any selected `Tab`, you can set this property to `false`.\n     */\n    value: PropTypes.any,\n};\n\nTabs.defaultProps = {\n    centered: false,\n    component: 'div',\n    fullWidth: false,\n    scrollable: false,\n    ScrollButtonComponent: TabScrollButton,\n    scrollButtons: 'auto',\n    textColor: 'inherit',\n};\n\nexport default withStyles(styles, {name: 'MuiTabs', withTheme: true})(Tabs);"],"mappings":"AAwDA","sourceRoot":""}